if(linear){
s3=sum(self:::score_ml_cd(subG_org2,data[,c(i,pa,node_in)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s3=sum(self:::score_ml_cd(subG_org2,data[,c(i,pa,node_in)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
G2[node_in,i]<-0
subG2<-G2[unique(c(i,pa,node_in)),unique(c(i,pa,node_in))]
if(linear){
s4=sum(self:::score_ml_cd(subG2,data[,c(i,pa,node_in)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s4=sum(self:::score_ml_cd(subG2,data[,c(i,pa,node_in)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
r1=c(r1,(s3-s4)*Dn)#增加一个真实父母增加的评分
r2=c(r2,(s2-s1)*Dn)#增加一个其他的结点增加的评分
df1=rbind(df1,data.frame(graph=graph,ratio=r,signal_noise=signal_var/noise_var,type=1,score=(s3-s4)*Dn))
df2=rbind(df2,data.frame(graph=graph,ratio=r,signal_noise=signal_var/noise_var,type=2,score=(s2-s1)*Dn))
}
}
}
result=rbind(result,rbind(df1,df2))
}
}
result
nrow(result)
linear=T
result=data.frame()
for(i in 1:10){
print(i)
set.seed(i)
G=randomGraph(40,1.5)
n=ncol(G)
for(r in seq(0.5,5,0.5)){
if(linear){
data=synthetic_data_linear(G,4000,ratio=r,return_noise = T)
}else{
data=synthetic_data_nonlinear(G,4000,ratio=r,return_noise = T)
}
noise=data$noise
data=data$data
Dn=nrow(data)
r1=c()
r2=c()
df1=data.frame()
df2=data.frame()
for(i in 1:n){
pa<-self:::parents(G,i)
if(length(pa)!=0){
for(j in 1:length(pa)){
node_out=sample(setdiff(1:n,c(i,pa)),1)
#node_in=sample(1:length(pa),1)
#node_in=pa[node_in]
node_in=pa[j]
G1<-G
subG_org1<-G1[c(i,pa,node_out),c(i,pa,node_out)]
if(linear){
s1=sum(self:::score_ml_cd(subG_org1,data[,c(i,pa,node_out)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s1=sum(self:::score_ml_cd(subG_org1,data[,c(i,pa,node_out)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
G1[node_out,i]<-1
subG1<-G1[c(i,pa,node_out),c(i,pa,node_out)]
if(linear){
s2=sum(self:::score_ml_cd(subG1,data[,c(i,pa,node_out)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s2=sum(self:::score_ml_cd(subG1,data[,c(i,pa,node_out)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
signal_var=var(data[,i]-noise[,i])
noise_var=var(noise[,i])
G2<-G
subG_org2<-G2[c(i,pa),c(i,pa)]
if(linear){
s3=sum(self:::score_ml_cd(subG_org2,data[,c(i,pa,node_in)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s3=sum(self:::score_ml_cd(subG_org2,data[,c(i,pa,node_in)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
G2[node_in,i]<-0
subG2<-G2[unique(c(i,pa,node_in)),unique(c(i,pa,node_in))]
if(linear){
s4=sum(self:::score_ml_cd(subG2,data[,c(i,pa,node_in)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s4=sum(self:::score_ml_cd(subG2,data[,c(i,pa,node_in)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
r1=c(r1,(s3-s4)*Dn)#增加一个真实父母增加的评分
r2=c(r2,(s2-s1)*Dn)#增加一个其他的结点增加的评分
df1=rbind(df1,data.frame(graph=i,ratio=r,signal_noise=signal_var/noise_var,type=1,score=(s3-s4)*Dn))
df2=rbind(df2,data.frame(graph=i,ratio=r,signal_noise=signal_var/noise_var,type=2,score=(s2-s1)*Dn))
}
}
}
result=rbind(result,rbind(df1,df2))
}
}
result=as.data.table(result)
setwd("/home/qj/zhengproj/R/Project/zheng_project")
fwrite(result,"result_linear50.csv")
result
result
linear=T
result=data.frame()
for(times in 1:10){
print(times)
set.seed(times)
G=randomGraph(40,1.5)
n=ncol(G)
for(r in seq(0.5,5,0.5)){
if(linear){
data=synthetic_data_linear(G,4000,ratio=r,return_noise = T)
}else{
data=synthetic_data_nonlinear(G,4000,ratio=r,return_noise = T)
}
noise=data$noise
data=data$data
Dn=nrow(data)
r1=c()
r2=c()
df1=data.frame()
df2=data.frame()
for(i in 1:n){
pa<-self:::parents(G,i)
if(length(pa)!=0){
for(j in 1:length(pa)){
node_out=sample(setdiff(1:n,c(i,pa)),1)
#node_in=sample(1:length(pa),1)
#node_in=pa[node_in]
node_in=pa[j]
G1<-G
subG_org1<-G1[c(i,pa,node_out),c(i,pa,node_out)]
if(linear){
s1=sum(self:::score_ml_cd(subG_org1,data[,c(i,pa,node_out)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s1=sum(self:::score_ml_cd(subG_org1,data[,c(i,pa,node_out)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
G1[node_out,i]<-1
subG1<-G1[c(i,pa,node_out),c(i,pa,node_out)]
if(linear){
s2=sum(self:::score_ml_cd(subG1,data[,c(i,pa,node_out)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s2=sum(self:::score_ml_cd(subG1,data[,c(i,pa,node_out)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
signal_var=var(data[,i]-noise[,i])
noise_var=var(noise[,i])
G2<-G
subG_org2<-G2[c(i,pa),c(i,pa)]
if(linear){
s3=sum(self:::score_ml_cd(subG_org2,data[,c(i,pa,node_in)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s3=sum(self:::score_ml_cd(subG_org2,data[,c(i,pa,node_in)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
G2[node_in,i]<-0
subG2<-G2[unique(c(i,pa,node_in)),unique(c(i,pa,node_in))]
if(linear){
s4=sum(self:::score_ml_cd(subG2,data[,c(i,pa,node_in)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s4=sum(self:::score_ml_cd(subG2,data[,c(i,pa,node_in)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
r1=c(r1,(s3-s4)*Dn)#增加一个真实父母增加的评分
r2=c(r2,(s2-s1)*Dn)#增加一个其他的结点增加的评分
df1=rbind(df1,data.frame(graph=times,ratio=r,signal_noise=signal_var/noise_var,type=1,score=(s3-s4)*Dn))
df2=rbind(df2,data.frame(graph=times,ratio=r,signal_noise=signal_var/noise_var,type=2,score=(s2-s1)*Dn))
}
}
}
result=rbind(result,rbind(df1,df2))
}
}
result=as.data.table(result)
result
fwrite(result,"result_linear50.csv")
result[,mean(unique(signal_noise)),by=c("graph","type")]
result[,mean(unique(signal_noise)),by=c("ratio","type")]
linear=F
result=data.frame()
for(times in 1:10){
print(times)
set.seed(times)
G=randomGraph(40,1.5)
n=ncol(G)
for(r in seq(0.5,5,0.5)){
if(linear){
data=synthetic_data_linear(G,4000,ratio=r,return_noise = T)
}else{
data=synthetic_data_nonlinear(G,4000,ratio=r,return_noise = T)
}
noise=data$noise
data=data$data
Dn=nrow(data)
r1=c()
r2=c()
df1=data.frame()
df2=data.frame()
for(i in 1:n){
pa<-self:::parents(G,i)
if(length(pa)!=0){
for(j in 1:length(pa)){
node_out=sample(setdiff(1:n,c(i,pa)),1)
#node_in=sample(1:length(pa),1)
#node_in=pa[node_in]
node_in=pa[j]
G1<-G
subG_org1<-G1[c(i,pa,node_out),c(i,pa,node_out)]
if(linear){
s1=sum(self:::score_ml_cd(subG_org1,data[,c(i,pa,node_out)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s1=sum(self:::score_ml_cd(subG_org1,data[,c(i,pa,node_out)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
G1[node_out,i]<-1
subG1<-G1[c(i,pa,node_out),c(i,pa,node_out)]
if(linear){
s2=sum(self:::score_ml_cd(subG1,data[,c(i,pa,node_out)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s2=sum(self:::score_ml_cd(subG1,data[,c(i,pa,node_out)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
signal_var=var(data[,i]-noise[,i])
noise_var=var(noise[,i])
G2<-G
subG_org2<-G2[c(i,pa),c(i,pa)]
if(linear){
s3=sum(self:::score_ml_cd(subG_org2,data[,c(i,pa,node_in)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s3=sum(self:::score_ml_cd(subG_org2,data[,c(i,pa,node_in)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
G2[node_in,i]<-0
subG2<-G2[unique(c(i,pa,node_in)),unique(c(i,pa,node_in))]
if(linear){
s4=sum(self:::score_ml_cd(subG2,data[,c(i,pa,node_in)],bw="nrd0",booster="lm",gamma=10,nrounds=30,score_type = "log"))
}else{
s4=sum(self:::score_ml_cd(subG2,data[,c(i,pa,node_in)],bw="nrd0",booster="gbtree",gamma=10,nrounds=30,score_type = "log"))
}
r1=c(r1,(s3-s4)*Dn)#增加一个真实父母增加的评分
r2=c(r2,(s2-s1)*Dn)#增加一个其他的结点增加的评分
df1=rbind(df1,data.frame(graph=times,ratio=r,signal_noise=signal_var/noise_var,type=1,score=(s3-s4)*Dn))
df2=rbind(df2,data.frame(graph=times,ratio=r,signal_noise=signal_var/noise_var,type=2,score=(s2-s1)*Dn))
}
}
}
result=rbind(result,rbind(df1,df2))
}
}
result=as.data.table(result)
result
fwrite(result,"result_nonlinear50.csv")
res=c()
for(n in 1:100){
s=0
for(a in 1:n){
for(b in 1:n){
for(c in 1:n){
for(d in 1:n){
if(a^b==c^d){
s=s+1
}
}
}
}
}
res=c(res,s)
}
res=c()
for(n in 1:100){
s=0
for(a in 1:n){
for(b in 1:n){
for(c in 1:n){
for(d in 1:n){
if(a^b==c^d){
s=s+1
}
}
}
}
}
print(s)
res=c(res,s)
}
plot(Res)
plot(ees)
plot(res)
plot(log(res))
plot(res)
res
dput(res)
length(res)
diff(res)
plot(diff(res)0
plot(diff(res)0
plot(diff(res))
plot(diff(res,2))
plot(diff(res,2))
plot(diff(res,3))
plot(diff(diff(res,1)))
diff(res)
plot(res)
plot(diff(res))
diff(diff(diff(res)))
plot(diff(diff(diff(res))))
plot(diff(diff(diff(diff(res)))))
plot(diff(diff(diff(diff(diff(res))))))
setwd("~/nv_data")
j=c(97114
97114
22745
22745
68842
68842
119768
119768
6241
6241
6241
6241
48250
48250
78939
78939
80086
80086
100828
100828
105110
105110
230470
230470
230470
272476
272476
272476
71837
71837
76107
76107
98795
98795
115078
115078
159329
159329
205086
205086
205086
210439
210439
210439
214415
214415
214415
243578
243578
243578
275632
275632
275632
283050
283050
283050
288530
288530
288530
)
j=c(97114,97114,22745,22745,68842,68842,119768,119768,6241,6241,6241,6241,48250,48250,78939,78939,80086,80086,100828,100828,105110,105110,230470,230470,230470,272476,272476,272476,71837,71837,76107,76107,98795,98795,115078,115078,159329,159329,205086,205086,205086,210439,210439,210439,214415,214415,214415,243578,243578,243578,275632,275632,275632,283050,283050,283050,288530,288530,288530)
j=unique(j)
j
allj=j
for(j in allj){
n=40
set.seed(j)
G=randomGraph(n,1.5)
data=synthetic_data_linear(G,4000)
v=nv(G)
fwrite(data,paste0("data_j",j,".csv"),col.names=F)
fwrite(as.data.frame(G),paste0("data_j",j,"_G.csv"),col.names=F)
}
distinguishableEdge<-function(G){
n=ncol(G)
v=0
for(k in 1:n){
pa=which(G[,k]==1)
if(length(pa)>1){
subG<-G[pa,pa]
idx<-which(subG==0,arr.ind=TRUE)
idx<-as.data.frame(idx)
idx<-idx%>%filter(row<col) #找到子图上三角中为0的元素，
edge=uniqueN(c(idx$row,idx$col)) #v表示能用v结构判别方向的边的数量
v=v+edge
}
}
return(v)
}
nv<-function(G){
n=ncol(G)
v=0
for(k in 1:n){
pa=which(G[,k]==1)
if(length(pa)>1){
subG<-G[pa,pa]
idx<-which(subG==0,arr.ind=TRUE)
idx<-as.data.frame(idx)
idx<-idx%>%filter(row<col) #找到子图上三角中为0的元素
if(nrow(idx)!=0){
v=v+1
}
}
}
return(v)
}
delV<-function(G,nodes=1:ncol(G),times=1){
count=0
for(k in nodes){
pa=which(G[,k]==1)
if(length(pa)>1){
subG<-G[pa,pa]
idx<-which(subG==0,arr.ind=TRUE)
idx<-as.data.frame(idx)
idx<-idx%>%filter(row<col) #找到子图上三角中为0的元素
node<-unique(c(idx$row,idx$col))
#sel<-node[-sample(1:length(node),1)] #随机保留一个结点，然后把其他结点对应的边都删了
sel<-node[-1]
#edge=length(node) #v表示能用v结构判别方向的边的数量
G[pa[sel],k]<-0 #把其他结点对应的边都删了
count=count+1
if(count>times){
return(G)
}
}
}
return(G)
}
library(pcalg)
library(bnlearn)
library(self)
library(dplyr)
library(data.table)
for(j in allj){
n=40
set.seed(j)
G=randomGraph(n,1.5)
data=synthetic_data_linear(G,4000)
v=nv(G)
fwrite(data,paste0("data_j",j,".csv"),col.names=F)
fwrite(as.data.frame(G),paste0("data_j",j,"_G.csv"),col.names=F)
}
allj
sort(allj)
allj=c(288211, 284421, 282615, 271405, 268180, 266949, 264905, 263073,
262184, 260914, 258373, 255601, 254531, 254471, 251735, 250609,
248203, 248186, 247418, 247292, 240691, 236675, 233090, 232086,
231864, 226223, 225484, 225457, 218973, 218413, 215252, 215098,
211359, 210822, 205156, 203386, 195207, 185946, 185551, 175845,
164867, 159338, 129590, 128616, 104199, 73043, 66861, 65367,
61177, 54087, 53302, 44103, 29930, 23921)
allj=sort(allj)
allj
getwd()
for(j in allj){
n=40
set.seed(j)
G=randomGraph(n,1.5)
data=synthetic_data_linear(G,4000)
v=nv(G)
fwrite(data,paste0("data_j",j,".csv"),col.names=F)
fwrite(as.data.frame(G),paste0("data_j",j,"_G.csv"),col.names=F)
}
library(self)
library(self)
install.packages(c("dplyr", "Matrix", "RcppArmadillo", "shiny", "tidyr"))
devtools::release()
setwd("~/zhengproj/R/Project/self")
setwd("~/zhengproj/R/Project/self")
devtools::release()
library(self)
devtools::release()
install.packages("mpmi")
library(mpmi)
cmi
?cmi
j=1
j=1
set.seed(j)
library(self)
library(bnlearn)
df1=expand.grid(samplesize=4000,dim=c(20,30,40,50,60),indegree=1.5)
df2=expand.grid(samplesize=c(1000,2000,4000,6000,8000),dim=40,indegree=1.5)
df3=expand.grid(samplesize=4000,dim=40,indegree=c(0.5,1,1.5,2,2.5))
df=rbind(df1,df2,df3)
df1
df
df1=expand.grid(samplesize=4000,dim=c(20,30,40,50,60),indegree=1.5)
df2=expand.grid(samplesize=c(1000,2000,4000,6000,8000),dim=40,indegree=1.5)
df3=expand.grid(samplesize=4000,dim=40,indegree=c(0.5,1,1.5,2,2.5))
df=rbind(df1,df2,df3)
result<-data.frame()
df
i=8
set.seed(1)
G=randomGraph(dim=df$dim[i],indegree=df$indegree[i])
data=synthetic_data_nonlinear(G,df$samplesize[i])
file=sprintf("exp_random_nl_size%d_dim%d_indegree%g",df$samplesize[i],df$dim[i],df$indegree[i])
file
?fhc
systme.time(fitG<-fhc(D=data,min_increase = 0.01,gamma = 10,save_model=F ,nthread=8,verbose = T))
system.time(fitG<-fhc(D=data,min_increase = 0.01,gamma = 10,save_model=F ,nthread=8,verbose = T))
term=data.frame(df[i,],indicators(fitG,G),type="nonlinear",method="SELF")
term
3929.377*8
28533/3929
3929.377/60
system.time(fitG2<-mmpcAnm(D=data))
system.time(fitG2<-mmpcAnm(data))
3929/60
set.seed(1)
G=randomGraph(dim=df$dim[i],indegree=df$indegree[i])
data=synthetic_data_linear(G,df$samplesize[i])
system.time(fitG3<-fhc(D=data,min_increase = 0.01,booster = "lm"))
