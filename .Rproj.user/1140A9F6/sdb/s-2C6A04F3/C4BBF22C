{
    "collab_server" : "",
    "contents" : "distinguishableEdge<-function(G){\n  n=ncol(G)\n  v=0\n  for(k in 1:n){\n    pa=which(G[,k]==1)\n    if(length(pa)>1){\n      subG<-G[pa,pa]\n      idx<-which(subG==0,arr.ind=TRUE)\n      idx<-as.data.frame(idx)\n      idx<-idx%>%filter(row<col) #找到子图上三角中为0的元素，\n      edge=uniqueN(c(idx$row,idx$col)) #v表示能用v结构判别方向的边的数量\n      v=v+edge\n    }\n  }\n  return(v)\n}\nnv<-function(G){\n  n=ncol(G)\n  v=0\n  for(k in 1:n){\n    pa=which(G[,k]==1)\n    if(length(pa)>1){\n      subG<-G[pa,pa]\n      idx<-which(subG==0,arr.ind=TRUE)\n      idx<-as.data.frame(idx)\n      idx<-idx%>%filter(row<col) #找到子图上三角中为0的元素\n      if(nrow(idx)!=0){\n        v=v+1\n      }\n    }\n  }\n  return(v)\n}\ndelV<-function(G,nodes=1:ncol(G),times=1){\n\n  count=0\n  for(k in nodes){\n    pa=which(G[,k]==1)\n    if(length(pa)>1){\n      subG<-G[pa,pa]\n      idx<-which(subG==0,arr.ind=TRUE)\n      idx<-as.data.frame(idx)\n      idx<-idx%>%filter(row<col) #找到子图上三角中为0的元素\n      node<-unique(c(idx$row,idx$col))\n      #sel<-node[-sample(1:length(node),1)] #随机保留一个结点，然后把其他结点对应的边都删了\n      sel<-node[-1]\n      #edge=length(node) #v表示能用v结构判别方向的边的数量\n      G[pa[sel],k]<-0 #把其他结点对应的边都删了\n      count=count+1\n      if(count>times){\n        return(G)\n      }\n    }\n  }\n  return(G)\n}\n\n\nlibrary(pcalg)\nlibrary(bnlearn)\nlibrary(self)\nlibrary(dplyr)\nlibrary(data.table)\n\nresult=c()\ntimes=100\nlibrary(foreach)\nlibrary(doParallel)\ncl<-makeCluster(8)\nregisterDoParallel(cl)\nv=data.frame()\nfor(j in 8001:12000){\n  set.seed(j)\n  G=randomGraph(n,1.5)\n  v=rbind(v,data.frame(nv=nv(G),seed=j))\n}\ntable(v$nv)\n\nj=v%>%filter(nv<=21&nv>=12)%>%group_by(nv)%>%sample_n(70)%>%ungroup%>% select(seed)\nj=j$seed\n\nv2=data.frame()\nfor(j in 100001:200000){\n  set.seed(j)\n  G=randomGraph(n,1.5)\n  v2=rbind(v2,data.frame(nv=nv(G),seed=j))\n}\nset.seed(0)\nj=v2%>%filter(nv==21)%>%group_by(nv)%>%sample_n(656)%>%ungroup%>%select(seed)\nj=j$seed\nj2=v2%>%filter(nv<21&nv>=12)%>%group_by(nv)%>%sample_n(1070)%>%ungroup%>%select(seed)\nj=c(j,j2$seed)\n\n#linear----\nresult<-data.frame()\nresult<-foreach(j = j, .combine = rbind,.packages=c(\"self\",\"data.table\",\"pcalg\",\"bnlearn\",\"dplyr\"),.inorder=F)%dopar%{\n  set.seed(j)\n  result<-data.frame()\n  G=randomGraph(n,1.5)\n  data=synthetic_data_linear(G,4000)\n  # fitG<-fhc(data,min_increase=0.01,booster = \"lm\")\n  # term=data.frame(indicators(fitG,G),type=\"linear\",method=\"SELF\",nv=nv(G),avg_drgree=1.5,seed=j)\n  # result<-rbind(result,term)\n\n  fitG<-lingam(data)\n  fitG<-as(fitG,\"amat\")\n  term=data.frame(indicators(fitG,G),type=\"linear\",method=\"ICA-LiNGAM\",nv=nv(G),avg_drgree=1.5,seed=j)\n  result<-rbind(result,term)\n\n  fitG<-amat(hc(data,score=\"bic-g\"))\n  term=data.frame(indicators(fitG,G),type=\"linear\",method=\"hc-bic-g\",nv=nv(G),avg_drgree=1.5,seed=j)\n  result<-rbind(result,term)\n  #print(result)\n  return(result)\n\n}\nstopCluster(cl)\nstopImplicitCluster()\n\nv2=data.frame()\nfor(j in 210001:300000){\n  v2=rbind(v2,data.frame(rest_edge=rest_edge(j),seed=j))\n}\nj=v2$seed[v2$rest_edge>=35]\n\n#linear2----\nresult<-data.frame()\nresult<-foreach(j = j, .combine = rbind,.packages=c(\"self\",\"data.table\",\"pcalg\",\"bnlearn\",\"dplyr\"),.inorder=F)%dopar%{\n  set.seed(j)\n  result<-data.frame()\n  G=randomGraph(40,1.5)\n  data=synthetic_data_linear(G,4000)\n  fitG<-fhc(data,min_increase=0.01,booster = \"lm\")\n  term=data.frame(indicators(fitG,G),type=\"linear\",method=\"SELF\",rest_edge=rest_edge(G),avg_drgree=1.5,seed=j)\n  result<-rbind(result,term)\n\n  fitG<-lingam(data)\n  fitG<-as(fitG,\"amat\")\n  term=data.frame(indicators(fitG,G),type=\"linear\",method=\"ICA-LiNGAM\",rest_edge=rest_edge(G),avg_drgree=1.5,seed=j)\n  result<-rbind(result,term)\n\n  fitG<-amat(hc(data,score=\"bic-g\"))\n  term=data.frame(indicators(fitG,G),type=\"linear\",method=\"hc-bic-g\",rest_edge=rest_edge(G),avg_drgree=1.5,seed=j)\n  result<-rbind(result,term)\n  #print(result)\n  return(result)\n\n}\nstopCluster(cl)\nstopImplicitCluster()\n#nonlinear----\nana=result_mbexp_nonlinear[,c(\"nv\",\"seed\")]\nana=as.data.table(ana)\nj=ana[,.SD[16:30,],by=nv]\nj=j$seed\n\n\ncl<-makeCluster(8)\nregisterDoParallel(cl)\nresult<-data.frame()\nresult<-foreach(j = j, .combine = rbind,.packages=c(\"self\",\"data.table\",\"bnlearn\",\"dplyr\"),.inorder=F,.verbose = T)%dopar%{\n  set.seed(j)\n  result<-data.frame()\n  n=40\n  G=randomGraph(n,1.5)\n  data=synthetic_data_nonlinear(G,4000)\n  fitG<-fhc(data,min_increase=0.01,booster = \"gbtree\",nthread=1)\n  term=data.frame(indicators(fitG,G),type=\"nonlinear\",method=\"SELF\",nv=nv(G),avg_drgree=1.5,seed=j)\n  result<-rbind(result,term)\n\n  # fitG<-mmpcAnm(data)\n  # term=data.frame(indicators(fitG,G),type=\"nonlinear\",method=\"MMPC-ANM\",nv=nv(G),avg_drgree=1.5,seed=j)\n  # result<-rbind(result,term)\n\n  return(result)\n\n}\nstopCluster(cl)\nstopImplicitCluster()\n\n#nonlinear2----\n\nv3<-v2\nv3<-v3%>%filter(rest_edge %between% c(24,26)|rest_edge %between% c(31,38))%>%as.data.table\n\nj=v3[,.SD[1:15,],by=rest_edge]\n\nj=j$seed\nlog.socket <- make.socket(port=4000)\nLog <- function(text, ...) {\n  msg <- sprintf(paste0(as.character(Sys.time()), \": \", text, \"\\n\"), ...)\n  cat(msg)\n  write.socket(log.socket, msg)\n}\n\ncl<-makeCluster(4)\nregisterDoParallel(cl)\nresult<-data.frame()\nresult<-foreach(j = j, .combine = rbind,.packages=c(\"self\",\"data.table\",\"bnlearn\",\"dplyr\"),.inorder=F,.verbose = T)%dopar%{\n\n  set.seed(j)\n  result<-data.frame()\n  n=40\n  G=randomGraph(n,1.5)\n  data=synthetic_data_nonlinear(G,4000)\n\n  # fitG<-fhc(data,min_increase=0.01,booster = \"gbtree\",nthread=1)\n  # term=data.frame(indicators(fitG,G),type=\"nonlinear\",method=\"SELF\",rest_edge=rest_edge(j),avg_drgree=1.5,seed=j)\n  # result<-rbind(result,term)\n\n  fitG<-mmpcAnm(data)\n  term=data.frame(indicators(fitG,G),type=\"nonlinear\",method=\"MMPC-ANM\",rest_edge=rest_edge(j),avg_drgree=1.5,seed=j)\n  result<-rbind(result,term)\n\n  return(result)\n\n}\n\nlibrary(foreach)\nlibrary(doParallel)\ncl<-makeCluster(7)\nregisterDoParallel(cl)\nresult<-foreach(j = 1:10, .combine = rbind,.packages=c(\"self\",\"data.table\",\"dplyr\"))%dopar%{\n  set.seed(j)\n  n=40\n  G=randomGraph(n,1.5)\n  start=nv(G)\n  step=round(start/5)\n  newG=G\n  n=nv(G)\n  for(i in 1:5){\n    print(nv(newG))\n    set.seed(j)\n    data=synthetic_data_nonlinear(newG,4000)\n    #fitG<-fhc(data,min_increase=0.01,booster = \"gbtree\",nthread=5)\n    fitG<-mmpcAnm(data)\n    #term=data.frame(indicators(fitG,newG),type=\"nonlinear\",method=\"SELF\",percent=0.25*(i-1))\n    term=data.frame(indicators(fitG,newG),type=\"nonlinear\",method=\"MMPC-ANM\",percent=0.25*(i-1))\n    result<-rbind(result,term)\n    newG=delV(newG,times = step)\n    #print(result)\n  }\n  result\n}\n\nlibrary(foreach)\nlibrary(doParallel)\ncl<-makeCluster(6)\nregisterDoParallel(cl)\nresult2<-foreach(j = 1:10, .combine = rbind,.packages=c(\"self\",\"data.table\",\"dplyr\"),.export = c(\"nv\",\"delV\"))%dopar%{\n  #for(j in 1:10){\n  set.seed(j)\n  n=40\n  G=randomGraph(n,1.5)\n  start=nv(G)\n  step=round(start/5)\n  newG=G\n  n=nv(G)\n  for(i in 1:5){\n    print(nv(newG))\n    set.seed(j)\n    data=synthetic_data_nonlinear(newG,4000)\n    fitG<-fhc(data,min_increase=0.01,gamma=10,booster = \"gbtree\",nthread=1)\n    #fitG<-mmpcAnm(data)\n    term=data.frame(indicators(fitG,newG),type=\"nonlinear\",method=\"SELF\",percent=0.25*(i-1))\n    #term=data.frame(indicators(fitG,newG),type=\"nonlinear\",method=\"MMPC-ANM\",percent=0.25*(i-1))\n    result<-rbind(result,term)\n    newG=delV(newG,times = step)\n    print(result)\n  }\n}\n\n#输出数据----\n\nfor(j in 1:10){\n  set.seed(j)\n  n=40\n  G=randomGraph(n,1.5)\n  start=nv(G)\n  step=round(start/5)\n  newG=G\n  n=nv(G)\n  for(i in 1:5){\n    set.seed(j)\n    data=synthetic_data_linear(newG,4000)\n    fwrite(data,paste0(\"data_j\",j,\"_i\",i,\".csv\"),col.names=F)\n    fwrite(as.data.frame(newG),paste0(\"data_j\",j,\"_i\",i,\"_G.csv\"),col.names=F)\n    newG=delV(newG,times = step)\n  }\n}\nana<-result%>%filter(method==\"SELF\")\nj=ana$seed\nj_v=ana$nv\ndt=data.table(j,j_v)\nfwrite(dt,\"jv.csv\")\n#输出数据2----\nfor(j in allj){\n  n=40\n  set.seed(j)\n  G=randomGraph(n,1.5)\n  data=synthetic_data_linear(G,4000)\n  v=nv(G)\n  fwrite(data,paste0(\"data_j\",j,\".csv\"),col.names=F)\n  fwrite(as.data.frame(G),paste0(\"data_j\",j,\"_G.csv\"),col.names=F)\n}\n",
    "created" : 1504881282997.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2453405629",
    "id" : "C4BBF22C",
    "lastKnownWriteTime" : 1504882270,
    "last_content_update" : 1504882270529,
    "path" : "~/zhengproj/R/Project/zheng_project/mbexp2.R",
    "project_path" : null,
    "properties" : {
        "docOutlineSize" : "76",
        "docOutlineVisible" : "1"
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}