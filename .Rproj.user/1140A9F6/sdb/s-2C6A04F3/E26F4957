{
    "collab_server" : "",
    "contents" : "library(bicanm)\n# library(pcalg)\nlibrary(bnlearn)\nsetwd(\"~/zhengproj/R/Project/zheng_project\")\n#source(\"function.R\")\ndf1=expand.grid(samplesize=4000,dim=c(20,30,40,50,60),indegree=1.5)\ndf2=expand.grid(samplesize=c(1000,2000,4000,6000,8000),dim=40,indegree=1.5)\ndf3=expand.grid(samplesize=4000,dim=40,indegree=c(0.5,1,1.5,2,2.5))\ndf=rbind(df1,df2,df3)\nresult<-data.frame()\n\n\nfor(i in 11:15){\n  # set.seed(1)\n  # G=randomGraph(dim=df$dim[i],indegree=df$indegree[i])\n  # data=synthetic_data_nonlinear(G,df$samplesize[i])\n  # file=sprintf(\"exp_random_nl_size%d_dim%d_indegree%g\",df$samplesize[i],df$dim[i],df$indegree[i])\n  # if(!file.exists(file)){\n  #   dir.create(file)\n  # }\n  # save(G,file=paste0(file,\"/realG.RData\"))\n  # fitG<-fhc(D=data,min_increase = 0.01,gamma = 10,isoutput=TRUE,file =file ,nthread=4)\n  # term=data.frame(df[i,],indicators(fitG,G),type=\"nonlinear\",method=\"anm\")\n  # result=rbind(result,term)\n  # for(j in 2:10){\n  # set.seed(j)\n  # G=randomGraph(dim=df$dim[i],indegree=df$indegree[i])\n  # data=synthetic_data_nonlinear(G,df$samplesize[i])\n  # file=sprintf(\"exp_random_nl_size%d_dim%d_indegree%g\",df$samplesize[i],df$dim[i],df$indegree[i])\n  # fitG<-fhc(D=data,min_increase = 0.02,gamma = 10,isoutput=F ,nthread=2)\n  # term=data.frame(df[i,],indicators(fitG,G),type=\"nonlinear\",method=\"anm\")\n  # result=rbind(result,term)\n  # }\n\n  # fitG<-pcAnm(data)\n  # term=data.frame(df[i,],indicators(fitG,G),type=\"nonlinear\",method=\"pcAnm\")\n  # result=rbind(result,term)\n\n  for(j in 2:10){\n    set.seed(j)\n    G=randomGraph(dim=df$dim[i],indegree=df$indegree[i])\n    data=synthetic_data_nonlinear(G,df$samplesize[i])\n    fitG<-pcAnm(data)\n    term=data.frame(df[i,],indicators(fitG,G),type=\"nonlinear\",method=\"pcAnm\")\n    result=rbind(result,term)\n  }\n\n  # for(j in 1:10){\n  #   set.seed(j)\n  #   G=randomGraph(dim=df$dim[i],indegree=df$indegree[i])\n  #   data=synthetic_data_linear(G,df$samplesize[i],rate=1)\n  #   #data=scale(data)\n  #   # file=sprintf(\"exp_random_l_size%d_dim%d_indegree%g\",df$samplesize[i],df$dim[i],df$indegree[i])\n  #   # if(!file.exists(file)){\n  #   #   dir.create(file)\n  #   # }\n  #   # save(G,file=paste0(file,\"/realG.RData\"))\n  #   fitG<-fhc(D=data,min_increase = 0.01,alpha=20,lambda=10,booster = \"gblinear\",isoutput=F,nthread=3)\n  #   term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"anm\")\n  #   result=rbind(result,term)\n  # }\n\n  #\n  # for(j in 1:30){\n  #   set.seed(j)\n  #   G=randomGraph(dim=df$dim[i],indegree=df$indegree[i])\n  #   data=synthetic_data_linear(G,df$samplesize[i],rate=1)\n  #   fitG<-lingam(data)\n  #   fitG<-as(fitG,\"amat\")\n  #   term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"lingam\")\n  #   result=rbind(result,term)\n  # }\n  # for(j in 1:30){\n  #   set.seed(j)\n  #   G=randomGraph(dim=df$dim[i],indegree=df$indegree[i])\n  #   data=synthetic_data_linear(G,df$samplesize[i],rate=1)\n  #   fitG<-amat(hc(data,score=\"loglik-g\"))\n  #   term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"hc-loglik-g\")\n  #   result=rbind(result,term)\n  #\n  #   fitG<-amat(hc(data,score=\"aic-g\"))\n  #   term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"hc-aic-g\")\n  #   result=rbind(result,term)\n  #   fitG<-amat(hc(data,score=\"bic-g\"))\n  #   term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"hc-bic-g\")\n  #   result=rbind(result,term)\n  #   fitG<-amat(hc(data,score=\"bge\"))\n  #   term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"hc-bge\")\n  #   result=rbind(result,term)\n  # }\n  # fitG<-amat(hc(data,score=\"loglik-g\"))\n  # term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"hc-loglik-g\")\n  # result=rbind(result,term)\n  #\n  # fitG<-amat(hc(data,score=\"aic-g\"))\n  # term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"hc-aic-g\")\n  # result=rbind(result,term)\n  # fitG<-amat(hc(data,score=\"bic-g\"))\n  # term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"hc-bic-g\")\n  # result=rbind(result,term)\n  # fitG<-amat(hc(data,score=\"bge\"))\n  # term=data.frame(df[i,],indicators(fitG,G),type=\"linear\",method=\"hc-bge\")\n  # result=rbind(result,term)\n   print(i)\n}\n\n",
    "created" : 1508243206033.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3895894167",
    "id" : "E26F4957",
    "lastKnownWriteTime" : 1494300325,
    "last_content_update" : 1494300325,
    "path" : "~/zhengproj/R/Project/zheng_project/random_graph.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 17,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}